name: Deploy to Amazon ECS

on:
  push:
    branches:
      - in-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17 for the Java application
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Step 3: Restore Maven Packages
      - name: Restore Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Configure AWS CLI with credentials
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      # Step 6: Create ECR repository if it does not exist
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "cloud" || \
          aws ecr create-repository --repository-name "cloud"

      # Step 7: Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cloud:latest"
          docker build -t $IMAGE_URI .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # Step 8: Push Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ env.IMAGE_URI }}

      # Step 9: Register ECS Task Definition
      - name: Register ECS Task Definition
        run: |
          cat <<EOF > ecs-task-definition.json
          {
            "family": "cloud-service",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "cloud-container",
                "image": "${{ env.IMAGE_URI }}",
                "memory": 256,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "hostPort": 8080
                  }
                ],
                "environment": [
                  {
                    "name": "SPRING_DATASOURCE_URL",
                    "value": "jdbc:postgresql://postgres-container:5432/cloud_db"
                  },
                  {
                    "name": "SPRING_DATASOURCE_USERNAME",
                    "value": "user"
                  },
                  {
                    "name": "SPRING_DATASOURCE_PASSWORD",
                    "value": "${{ secrets.POSTGRES_PASSWORD }}"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "taskRoleArn": "${{ secrets.ECS_TASK_ROLE_ARN }}"
          }
          EOF

          # Register the task definition
          aws ecs register-task-definition --cli-input-json file://ecs-task-definition.json

      # Step 10: Check for Subnets
      - name: Check for Subnets
        id: check-subnet
        run: |
          SUBNET_OUTPUT=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=YOUR_VPC_ID" --output json 2>/dev/null)
          if [ "$(echo $SUBNET_OUTPUT | jq -r '.Subnets | length')" -eq 0 ]; then
            echo "No existing subnets found. Creating a new subnet..."
            NEW_SUBNET_OUTPUT=$(aws ec2 create-subnet --vpc-id YOUR_VPC_ID --cidr-block YOUR_CIDR_BLOCK --availability-zone us-east-1a)
            echo "New subnet created."
            NEW_SUBNET_ID=$(echo $NEW_SUBNET_OUTPUT | jq -r '.Subnet.SubnetId')
            echo "New Subnet ID: $NEW_SUBNET_ID"
            echo "SUBNET_ID=$NEW_SUBNET_ID" >> $GITHUB_ENV
          else
            echo "Existing subnets found."
            EXISTING_SUBNET_ID=$(echo $SUBNET_OUTPUT | jq -r '.Subnets[0].SubnetId')
            echo "Using existing Subnet ID: $EXISTING_SUBNET_ID"
            echo "SUBNET_ID=$EXISTING_SUBNET_ID" >> $GITHUB_ENV
          fi

      # Step 11: Check if ECS Cluster Exists and Create if Necessary
      - name: Create ECS Cluster if not exists
        id: create-cluster
        run: |
          CLUSTER_OUTPUT=$(aws ecs describe-clusters --clusters "my-cluster" --output json 2>/dev/null)
          if [ "$(echo $CLUSTER_OUTPUT | jq -r '.clusters | length')" -eq 0 ]; then
            echo "Cluster does not exist. Creating cluster..."
            aws ecs create-cluster --cluster-name "my-cluster" --output json
            echo "Cluster created."
          else
            echo "Cluster exists."
          fi

      # Step 12: Check Cluster Status after Creation
      - name: Check Cluster Status
        id: check-cluster
        run: |
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters "my-cluster" --query "clusters[0].status" --output text)
          echo "Cluster status: $CLUSTER_STATUS"
          if [[ "$CLUSTER_STATUS" == "ACTIVE" ]]; then
            echo "The cluster is active."
          else
            echo "The cluster is not active or does not exist. Current status: $CLUSTER_STATUS"
            exit 1  # Exit the workflow if the cluster is not active
          fi

      # Step 13: Check if ECS Service Exists
      - name: Check if ECS Service Exists
        id: check-service
        run: |
          SERVICE_OUTPUT=$(aws ecs describe-services --cluster my-cluster --services cloud-service --output json 2>/dev/null)
          if [ "$(echo $SERVICE_OUTPUT | jq -r '.services | length')" -eq 0 ]; then
            echo "Service 'cloud-service' does not exist. Creating it..."
            aws ecs create-service --cluster my-cluster --service-name cloud-service --task-definition cloud-service --desired-count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNET_ID }}],securityGroups=[sg-xxxxxxxx],assignPublicIp='ENABLED'}"
          else
            echo "Service 'cloud-service' exists."
          fi

      # Step 14: Update ECS Service
      - name: Update ECS Service
        run: |
          echo "Updating ECS service..."
          aws ecs update-service --cluster my-cluster --service cloud-service --task-definition cloud-service --force-new-deployment || echo "Failed to update service."
