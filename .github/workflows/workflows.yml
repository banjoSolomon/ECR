name: Deploy to Amazon ECS

on:
  push:
    branches:
      - in-dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Restore Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: ${{ secrets.AWS_REGION }}

      # Create ECR repository if it does not exist
      - name: Create ECR Repository if not exists
        run: |
          aws ecr describe-repositories --repository-names "cloud" || \
          aws ecr create-repository --repository-name "cloud"

      - name: Build Docker image
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/cloud:latest"
          docker build -t $IMAGE_URI .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Push Docker image to Amazon ECR
        run: |
          docker push ${{ env.IMAGE_URI }}

      - name: Register ECS Task Definition
        run: |
          cat <<EOF > ecs-task-definition.json
          {
            "family": "cloud-service",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "cloud-container",
                "image": "${{ env.IMAGE_URI }}",
                "memory": 256,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "hostPort": 8080
                  }
                ],
                "environment": [
                  {
                    "name": "SPRING_DATASOURCE_URL",
                    "value": "jdbc:postgresql://postgres-container:5432/cloud_db"
                  },
                  {
                    "name": "SPRING_DATASOURCE_USERNAME",
                    "value": "user"
                  },
                  {
                    "name": "SPRING_DATASOURCE_PASSWORD",
                    "value": "${{ secrets.POSTGRES_PASSWORD }}"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "taskRoleArn": "${{ secrets.ECS_TASK_ROLE_ARN }}"
          }
          EOF
          
          # Register the task definition
          aws ecs register-task-definition --cli-input-json file://ecs-task-definition.json

      # Create ECS Cluster if not exists
      - name: Create ECS Cluster if not exists
        id: create-cluster
        run: |
          CLUSTER_OUTPUT=$(aws ecs describe-clusters --clusters "my-cluster" --output json 2>/dev/null || aws ecs create-cluster --cluster-name "my-cluster" --output json)
          echo "Cluster output: $CLUSTER_OUTPUT"

      # Check cluster status after creation
      - name: Check Cluster Status
        id: check-cluster
        run: |
          CLUSTER_STATUS=$(aws ecs describe-clusters --clusters "my-cluster" --query "clusters[0].status" --output text)
          echo "Cluster status: $CLUSTER_STATUS"
          if [[ "$CLUSTER_STATUS" != "ACTIVE" ]]; then
            echo "The cluster is not active or does not exist. Current status: $CLUSTER_STATUS"
            exit 1  # Exit the workflow if the cluster is not active
          fi

      - name: Update ECS Service
        run: |
          echo "Updating ECS service..."
          aws ecs update-service --cluster my-cluster --service cloud-service --force-new-deployment || echo "Failed to update service."
